using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Hosting;
using Newtonsoft.Json;
using Serilog;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;

namespace Alfa.WebService
{
    public class ErrorHandlingMiddleware
    {
        private readonly RequestDelegate next;
        public ErrorHandlingMiddleware(RequestDelegate next)
        {
            this.next = next;
        }

        public async Task Invoke(HttpContext context, ILogger elasticLogger, IHostEnvironment env)
        {
            try
            {
                await next(context);
            }
            catch (Exception ex)
            {
                await HandleExceptionAsync(context, ex , elasticLogger,env);
                if (env.IsDevelopment())
                {
                    throw;
                }
            }
        }

        private static Task HandleExceptionAsync(HttpContext context, Exception ex, ILogger elasticLogger, IHostEnvironment env)
        {
            elasticLogger.Error("Exception: "+ ex);
            if (!env.IsDevelopment())
            {
                var code = HttpStatusCode.InternalServerError; // 500 if unexpected
                var result = JsonConvert.SerializeObject(new { error = "Some internal error occoured. Please Try again after some time." });
                context.Response.ContentType = "application/json";
                context.Response.StatusCode = (int)code;
                return context.Response.WriteAsync(result);
            }
            return Task.CompletedTask;
        }
    }
}
